AWSTemplateFormatVersion: '2010-09-09'
Description: 'Task Manager Deployment Infrastructure'

Parameters:
  BaseDomain:
    Type: String
    Description: 'Base domain for deployments'
  
  HostedZoneId:
    Type: String
    Description: 'Route53 Hosted Zone ID'
  
  EC2IP:
    Type: String
    Description: 'EC2 Instance IP Address'
    
  DeploymentBucket:
    Type: String
    Description: 'S3 Bucket for Lambda deployment packages'

Resources:
  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: TaskManagerDeploymentAPI
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - DeploymentMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod

  # API Resource
  DeploymentResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: deploy

  # API Method
  DeploymentMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref DeploymentResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateSubdomainFunction.Arn}/invocations"

  # Lambda Functions
  CreateSubdomainFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs18.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: lambda/create-subdomain.zip
      Environment:
        Variables:
          HOSTED_ZONE_ID: !Ref HostedZoneId
          BASE_DOMAIN: !Ref BaseDomain
          EC2_IP: !Ref EC2IP

  DeployAppFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs18.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: lambda/deploy-app.zip
      Environment:
        Variables:
          GITHUB_REPO_URL: 'git@github.com:alehstrunevskiy/task-manager.git'
          DEPLOY_PATH: '/var/www/html'

  NotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs18.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: lambda/send-notification.zip
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref NotificationTopic

  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # SNS Topic
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: TaskManagerDeployment

Outputs:
  ApiEndpoint:
    Description: 'API Gateway endpoint URL'
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/deploy"